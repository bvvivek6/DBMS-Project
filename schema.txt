CREATE TABLE users (
    user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookings_details (
  detail_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  booking_id INT NOT NULL,
  seat_number INT NOT NULL,
  fare DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (booking_id) REFERENCES bookings(booking_id)
);

CREATE TABLE bookings (
  booking_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  bus_id INT NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (bus_id) REFERENCES buses(bus_id)
);

CREATE TABLE buses (
  bus_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  bus_name VARCHAR(100) NOT NULL,
  source VARCHAR(50) NOT NULL,
  destination VARCHAR(50) NOT NULL,
  total_seats INT NOT NULL,
  fare_per_seat DECIMAL(10,2) NOT NULL
);

CREATE TABLE seats (
  seat_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  bus_id INT NOT NULL,
  seat_number INT NOT NULL,
  is_booked TINYINT(1) DEFAULT 0,
  FOREIGN KEY (bus_id) REFERENCES buses(bus_id)
);
CREATE TABLE admins (
  admin_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE user_booking_history (
    history_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    bus_id INT NOT NULL,
    travel_date DATE NOT NULL,
    travel_time TIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (bus_id) REFERENCES buses(bus_id)
);

Trigger for Deleting Seats when a Bus is Deleted
sql
Copy
Edit
DELIMITER //

CREATE TRIGGER delete_seats_before_bus_delete
BEFORE DELETE ON buses
FOR EACH ROW
BEGIN
    -- Delete all seats associated with the bus being deleted
    DELETE FROM seats WHERE bus_id = OLD.bus_id;
END //

DELIMITER ;


Trigger for Updating Seats
sql
Copy
Edit
DELIMITER //

CREATE TRIGGER update_seats_after_bus_insert
AFTER INSERT ON buses
FOR EACH ROW
BEGIN
    DECLARE i INT DEFAULT 1;

    -- Loop to insert seats based on the total_seats value of the new bus
    WHILE i <= NEW.total_seats DO
        INSERT INTO seats (bus_id, seat_number, is_booked) 
        VALUES (NEW.bus_id, i, 0); -- '0' indicates the seat is not booked initially
        SET i = i + 1;
    END WHILE;
END //

DELIMITER ;